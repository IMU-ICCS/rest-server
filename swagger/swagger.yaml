#
# Documentation of the Cloudiator REST Api
#
swagger: '2.0'

# Document Metadata
info:
  version: "0.2.0"
  title: Cloudiator REST Api
  contact:
    name: Daniel Baur
    email: daniel.baur@uni-ulm.de
    url: cloudiator.org
  license:
    name: Apache License 2.0
    url: https://raw.githubusercontent.com/cloudiator/rest/master/LICENSE
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json


host: localhost:9000

# Parameters
parameters:
  id:
    name: id
    in: path
    description: Unique identifier of the resource
    required: true
    type: string

# Definitions
definitions:

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
        
  Cloud:
    allOf: 
    - $ref: '#/definitions/NewCloud'
    - required:
      - id
      properties:
        id:
          type: string
          description: Unique identifier for the cloud
          
  Api:
    required:
      - providerName
    properties:
      providerName:
        type: string
        description: Name of the API provider, maps to a driver
  
  Credential:
    required:
      - user
      - secret
    properties:
      user:
        type: string
        description: Username for authentication at the cloud provider's API
      secret:
        type: string
        description: Secret (e.g. Password) for authentication at the cloud provider's API
        
  Configuration:
    properties:
      properties:
        type: array
        description: Array of configuration properties.
        items:
          $ref: '#/definitions/Property'
        
  Property:
    description: "A key-value pair"
    required:
      - key
      - value
    properties:
      key:
        type: string
        description: "Key of the property"
      value:
        type: string
        description: "Value of the property"
      
  NewCloud:
    required:
      - name
      - api 
      - credential
      - cloudType
    properties:
      name:
        type: string
        description: "Human readable name for the cloud. Needs to be unique."
      cloudType:
        description: "Type of the cloud"
        type: string
        enum: ['PRIVATE','PUBLIC']
      api:
        $ref: '#/definitions/Api'
      credential:
        $ref: '#/definitions/Credential'
      configuration:
        $ref: '#/definitions/Configuration'
        
  Image:
    required:
      - id
      - name
      - providerId
      - operatingSystem
    properties:
      id:
        type: string
        description: "Unique identifier for this image"
      name:
        type: string
        description: "Human-readable name"
      providerId:
        type: string
        description: "Original id issued by provider"
      operatingSystem:
        $ref: '#/definitions/OperatingSystem'
        
  OperatingSystem:
    properties:
      # todo: requires enum?
      operatingSystemFamily: 
        type: string
        description: "Family of the OS"
      # todo: requires enum?
      operatingSystemArchitecture:
        type: string
        description: "Architecture of the OS"
      operatingSystemVersion:
        type: string
        description: "Version of the OS"
  
  Hardware:
    required:
      - id
      - name
      - providerId
      - cores
      - ram
    properties:
      id:
        description: "Unique identifier for the hardware"
        type: string
      name:
        description: "Human-readable name for the hardware"
        type: string
      providerId:
        description: "Original id issued by the provider"
        type: string
      cores:
        description: "Number of cores"
        type: integer
        format: int32
      ram:
        description: "Amount of RAM"
        type: integer
        format: int64
      disk:
        description: "Amount of disk space"
        type: number
        format: double
      location:
        $ref: '#/definitions/Location'
    
  Location:
    required:
      - id
      - name
      - providerId
      - locationScope
      - isAssignable
    properties:
      id:
        description: "Unique identifier"
        type: string
      name:
        description: "Human-readable name"
        type: string
      providerId:
        description: "Original id issued by the provider"
        type: string
      locationScope:
        description: "Scope of the location"
        type: string
        enum: ['PROVIDER', 'REGION', 'ZONE', 'HOST']
      isAssignable:
        description: "True of the location can be used to start virtual machines, false if not"
        type: boolean
      parent:
        # self reference is broken in editor and UI
        # see https://github.com/swagger-api/swagger-editor/issues/1005
        $ref: '#/definitions/Location'
      
  Component:
    type: object
    discriminator: type
    required:
      - name
      - type
    properties:
      type:
        description: |
          Discriminator for polymorphism.
        type: string
      name:
        description: "Human-readable name"
        type: string
        
  LanceComponent:
    allOf:
      - $ref: '#/definitions/Component'
    required:
      - start
    properties:
      init:
        description: | 
          Initialization action.
        type: string
      preInstall:
        description: |
          Executed before installation action. Can be e.g. used for downloading binaries.
        type: string
      install:
        description: |
          Used for installing the application.
        type: string
      postInstall:
        description: |
          Used for configuration of the application component. First action where Lance environment variables are set.
        type: string
      preStart:
        description: |
          Called before starting the application. Can be e.g. used for configuration an environment.
        type: string
      start:
        description: |
          Starts the component. Needs to return for PlainContainer and not return for Docker.
        type: string
      startDetection:
        description: |
          Detects the start of the application. Required if the application does not start instantianous.
        type: string
      stopDetection:
        description: |
          Checks if the application has stopped. Is periodically checked to detect a crash of the application.
        type: string
      postStart:
        description: |
          Executed after the application has successfully started.
        type: string
      preStop:
        description: |
          Called before the application is stopped.
        type: string
      stop:
        description: |
          Stops the application.
        type: string
      postStop:
        description: |
          Executed after the application is successfully stopped.
        type: string
      shutdown:
        description: |
          Executed before the container is shutdown. Can be used to backup state.
        type: string
        
  Application:
    properties:
      name:
        type: string
  
  ApplicationComponent:
    properties:
      test:
        type: string
        
  Node:
    properties:
      name:
        type: string
    
  Relationship:
    properties:
      test:
        type: string
  
# Paths
paths:

  # Cloud related paths:
  /clouds:
    get:
      description: |
          Returns all clouds from the system that the user has access to
      responses:
        200:
          description: |
            All clouds
          schema:
            type: array
            items: 
              $ref: '#/definitions/Cloud'
    post:
      description: Creates a new cloud.
      parameters:
        - name: cloud
          in: body
          description: Cloud to add
          required: true
          schema:
            $ref: '#/definitions/NewCloud'
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Cloud"
    
  /clouds/{id}:
    get:
      description: |
        Returns the cloud identified by the given id parameter
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
         description: |
          The cloud identified by the id
         schema:
          $ref: '#/definitions/Cloud'
    delete:
      description: |
        Deletes the cloud identified by the given id paramater.
      parameters:
        - $ref: '#/parameters/id'
      responses:
        200:
          description: "OK"
  
  # Image related paths
  /images:
    get:
      description: |
        Returns all images visable to the user
      responses:
        200:
          description: |
            All images
          schema:
            type: array
            items:
              $ref: '#/definitions/Image'
  /images/{id}:
    put:
      description: |
        Updates a specific image
      parameters:
        - $ref: '#/parameters/id'
        - name: image
          in: body
          description: |
            Image to update
          required: true
          schema:
            $ref: '#/definitions/Image'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Image'

  # Hardware related paths
  /hardware:
    get:
      description: |
        Returns all hardware visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Hardware'
    
  # Location related paths
  /locations:
    get:  
      description: |
        Returns all locations visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Location'
  
  # Component related paths
  /components:
    get:
      description: | 
        Returns all components visible to the user
      responses:
        200:
          description: |
            OK
          schema:
            type: array
            items: 
              $ref: '#/definitions/Component'
    put:
      description: |
        Creates a new component
      parameters:
        - name: component
          in: body
          description: |
            Component to be created
          required: true
          schema:
            $ref: '#/definitions/Component'
      responses:
        200:
          description: |
            OK
          schema:
            $ref: '#/definitions/Component'
        
          
  